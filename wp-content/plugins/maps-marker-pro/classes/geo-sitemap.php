<?php
namespace MMP;

use MMP\Maps_Marker_Pro as MMP;

class Geo_Sitemap {
	/**
	 * Registers the hooks
	 *
	 * @since 4.0
	 */
	public function init() {
		if (MMP::$settings['sitemapGoogle']) {
			add_action('sm_buildmap', array($this, 'add_kml_to_google_sitemap'));
		}
		if (MMP::$settings['apiSitemap'] && MMP::$settings['sitemapYoast']) {
			add_filter('wpseo_sitemap_index', array($this, 'add_sitemap_to_yoast'));
		}
		if (MMP::$settings['apiSitemap'] && MMP::$settings['sitemapRankMath']) {
			add_filter('rank_math/sitemap/index', array($this, 'add_sitemap_to_rank_math'), 11);
		}
	}

	/**
	 * Adds the KML links for maps to the sitemap generated by the Google XML Sitemaps plugin
	 *
	 * @since 4.0
	 */
	public function add_kml_to_google_sitemap() {
		$db = MMP::get_instance('MMP\DB');
		$api = MMP::get_instance('MMP\API');

		if (!class_exists('GoogleSitemapGenerator')) {
			return;
		}

		if (method_exists('GoogleSitemapGenerator', 'GetInstance')) {
			$get_instance_method = 'GetInstance';
			$add_url_function = 'AddUrl';
		} else if (method_exists('GoogleSitemapGenerator', 'get_instance')) {
			$get_instance_method = 'get_instance';
			$add_url_function = 'add_url';
		} else {
			return;
		}

		$sitemap = \GoogleSitemapGenerator::$get_instance_method();
		$maps = $db->get_all_maps(false, array(
			'include' => MMP::$settings['sitemapGoogleInclude'],
			'exclude' => MMP::$settings['sitemapGoogleExclude']
		));
		foreach ($maps as $map) {
			$sitemap->$add_url_function(
				$api->link("/export/kml/{$map->id}/"),
				$map->updated_on,
				MMP::$settings['sitemapGoogleFrequency'],
				MMP::$settings['sitemapGooglePriority']
			);
		}
	}

	/**
	 * Adds the geo sitemap to the Yoast sitemap index
	 *
	 * @since 4.0
	 *
	 * @param string $custom_items Current added custom items
	 */
	public function add_sitemap_to_yoast($custom_items) {
		$sitemap_tag = $this->get_sitemap_tag();
		if ($sitemap_tag !== false) {
			$custom_items .= $sitemap_tag;
		}

		return $custom_items;
	}

	/**
	 * Adds the geo sitemap to the Rank Math sitemap index
	 *
	 * @since 4.22
	 *
	 * @param string $xml Current sitemap index
	 */
	public function add_sitemap_to_rank_math($xml) {
		$sitemap_tag = $this->get_sitemap_tag();
		if ($sitemap_tag !== false) {
			$xml .= $sitemap_tag;
		}

		return $xml;
	}

	/**
	 * Shows a geo sitemap with links to the fullscreen maps
	 *
	 * @since 4.0
	 */
	public function show_sitemap() {
		$db = MMP::get_instance('MMP\DB');
		$api = MMP::get_instance('MMP\API');

		$maps = $db->get_all_maps();

		$sitemap = new \SimpleXMLElement(
			  '<?xml version="1.0" encoding="UTF-8"?>'
			. '<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"></urlset>'
		);
		foreach ($maps as $map) {
			$url = $sitemap->addChild('url');
			$url->addChild('loc', $api->link("/fullscreen/{$map->id}/"));
			$url->addChild('lastmod', (new \DateTime($map->updated_on, new \DateTimeZone('UTC')))->format('Y-m-d'));
		}

		header('Access-Control-Allow-Origin: *');
		header('Content-type: text/xml; charset=utf-8');

		echo $sitemap->asXML();
	}

	/**
	 * Returns the sitemap tag needed for adding the geo sitemap to a sitemap index
	 *
	 * @since 4.22
	 */
	private function get_sitemap_tag() {
		$db = MMP::get_instance('MMP\DB');
		$api = MMP::get_instance('MMP\API');

		$maps = $db->get_all_maps(array(
			'orderby'   => 'id',
			'sortorder' => 'DESC',
			'limit'     => 1
		));
		if (!count($maps)) {
			return false;
		}

		$loc = $api->link('/geo-sitemap/');
		$lastmod = (new \DateTime($maps[0]->created_on, new \DateTimeZone('UTC')))->format('c');

		return "<sitemap><loc>{$loc}</loc><lastmod>{$lastmod}</lastmod></sitemap>";
	}
}
